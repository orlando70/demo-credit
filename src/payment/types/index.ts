// Generated by https://quicktype.io
/* eslint-disable max-classes-per-file, lines-between-class-members */

import {PaystackEventEnum, TransferReciepientType} from './enum';

export interface IReciepientResponse {
  active: boolean;
  createdAt: string;
  currency: string;
  domain: string;
  id: number;
  integration: number;
  name: string;
  recipientCode: string;
  type: string;
  updatedAt: string;
  isDeleted: boolean;
  details: IDetails;
}

export interface IInitiateTransferResponse {
  reference: string;
  integration: number;
  domain: string;
  amount: number;
  currency: string;
  source: string;
  reason: string;
  recipient: number;
  status: string;
  transferCode: string;
  id: number;
  createdAt: string;
  updatedAt: string;
}

export type IFinalizeTransferResponse = IInitiateTransferResponse;

export interface InitiateTransferData {
  source: string;
  reason: string;
  amount: number;
  recipient: string;
  metadata?: Record<string, any>;
  reference?: string;
}

export interface Ifinalize {
  transferCode: string;
  otp?: string;
  metadata: Record<string, any>;
}

export interface IDetails {
  authorizationCode: null;
  account_number: string;
  accountName: null;
  bankCode: string;
  bankName: string;
}

export interface TransferReciepientData {
  type: TransferReciepientType;
  email: string;
  currency: string;
  bank_code: string;
  account_number: string;
}

export interface ChargeCreationData {
  email: string;
  amount: number;
  metadata?: Record<string, string>;
  card?: any;
  bank?: any;
  authorizationCode: string;
}

export interface PaystackChargeEventData {
  status: string;
  id: number;
  amount: number;
  channel: string;
  metadata: {transactionId: number; walletId: number};
  customer: {
    email: string;
  };
  authorization: {
    authorizationCode: string;
    bin: string;
    last4: string;
    expMonth: string;
    expYear: string;
    cardType: string;
    bank: string;
    countryCode: string;
    brand: string;
    accountName: string;
    signature: string;
    reusable: boolean;
  };
}

export interface PaystackTransferEventData {
  amount: number;
  currency: number;
  domain: string;
  id: number;
  integration: {
    id: number;
    isLive: boolean;
  };
  reason: string;
  reference: string;
  source: string;
  status: string;
  transferCode: string;
  recipient: {
    active: boolean;
    currency: string;
    email: string;
    id: string;
    name: string;
    recipientCode: string;
    type: string;
    details: {
      accountNumber: string;
      accountName: string;
      bankCode: string;
      bankName: string;
    };
  };
  metadata: Record<string, any>;
}

export interface PaystackEvent<T> {
  event: PaystackEventEnum;
  data: T;
}
// export interface PaystackChargeEvent extends PaystackEventBase {
//   data: PaystackChargeEventData;
// }

// export interface PaystackTransferEvent extends PaystackEventBase {
//   data: PaystackTransferEventData;
// }
